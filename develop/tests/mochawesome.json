{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2025-05-13T21:35:54.615Z",
    "end": "2025-05-13T21:35:55.345Z",
    "duration": 730,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "fa429ef8-ea99-4f02-880c-bc361009a248",
      "title": "",
      "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
      "file": "/test/lib/index.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b5c2d6b6-b17b-4b1b-9b5c-f673729a7fc6",
          "title": "Genderize",
          "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
          "file": "/test/lib/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "24a78853-8025-4da2-9615-2132b1756fc5",
              "title": "params()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with arrays",
                  "fullTitle": "Genderize params() should work with arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params([\"Max\",\"Lisa\"],\"DE\").toString(),\"name[]=Max&name[]=Lisa&country_id=DE\")",
                  "err": {},
                  "uuid": "5d16feba-16b6-4f8a-9757-e815ff3964fc",
                  "parentUUID": "24a78853-8025-4da2-9615-2132b1756fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single string",
                  "fullTitle": "Genderize params() should work with single string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params(\"Max\").toString(),\"name=Max\")",
                  "err": {},
                  "uuid": "d761d351-5b7a-4296-ae21-cef4b11fa8ef",
                  "parentUUID": "24a78853-8025-4da2-9615-2132b1756fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if no name was given",
                  "fullTitle": "Genderize params() should throw an exception if no name was given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{new Genderize().params([])},/No name given, but at least one is required/)",
                  "err": {},
                  "uuid": "8e2390bf-c295-40ce-b557-d30802404ab5",
                  "parentUUID": "24a78853-8025-4da2-9615-2132b1756fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if > 10 names were given",
                  "fullTitle": "Genderize params() should throw an exception if > 10 names were given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{new Genderize().params([\"James\",\"Robert\",\"John\",\"Michael\",\"David\",\"William\",\"Richard\",\"Thomas\",\"Christopher\",\"Daniel\",\"Paul\"])},/Too many names given: 11 names provided, but 10 is the maximum allowed/)",
                  "err": {},
                  "uuid": "422687e5-9968-47e6-b890-a7df774bebc5",
                  "parentUUID": "24a78853-8025-4da2-9615-2132b1756fc5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add the apiKey if given",
                  "fullTitle": "Genderize params() should add the apiKey if given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize(\"hello-world\").params([\"Max\",\"Lisa\"],\"DE\").toString(),\"name[]=Max&name[]=Lisa&country_id=DE&apikey=hello-world\")",
                  "err": {},
                  "uuid": "f1f1ceea-6000-40c1-9965-2c31e582b319",
                  "parentUUID": "24a78853-8025-4da2-9615-2132b1756fc5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5d16feba-16b6-4f8a-9757-e815ff3964fc",
                "d761d351-5b7a-4296-ae21-cef4b11fa8ef",
                "8e2390bf-c295-40ce-b557-d30802404ab5",
                "422687e5-9968-47e6-b890-a7df774bebc5",
                "f1f1ceea-6000-40c1-9965-2c31e582b319"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8ba9c702-696d-4b47-ab70-4837428d44f8",
              "title": "limit()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return null if no request was sent before",
                  "fullTitle": "Genderize limit() should return null if no request was sent before",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Genderize().limit,null)",
                  "err": {},
                  "uuid": "e13b25c7-df16-4163-b352-9e61129889ab",
                  "parentUUID": "8ba9c702-696d-4b47-ab70-4837428d44f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e13b25c7-df16-4163-b352-9e61129889ab"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9bc53694-957a-474d-a8e8-fe6e73f5b0fc",
              "title": "getIntHeader()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with string",
                  "fullTitle": "Genderize getIntHeader() should work with string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(\"123\"),123)",
                  "err": {},
                  "uuid": "9221a32b-1aae-499a-bb78-ee360a9cd467",
                  "parentUUID": "9bc53694-957a-474d-a8e8-fe6e73f5b0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with string[]",
                  "fullTitle": "Genderize getIntHeader() should work with string[]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader([\"123\",\"456\"]),123)",
                  "err": {},
                  "uuid": "3251867c-50c1-4d64-b7f5-ec46d4207190",
                  "parentUUID": "9bc53694-957a-474d-a8e8-fe6e73f5b0fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with undefined",
                  "fullTitle": "Genderize getIntHeader() should work with undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(void 0),void 0)",
                  "err": {},
                  "uuid": "6e50d9c0-9ba2-4415-9f5c-3b057782c356",
                  "parentUUID": "9bc53694-957a-474d-a8e8-fe6e73f5b0fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9221a32b-1aae-499a-bb78-ee360a9cd467",
                "3251867c-50c1-4d64-b7f5-ec46d4207190",
                "6e50d9c0-9ba2-4415-9f5c-3b057782c356"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "5c68e3ea-d2bf-464f-868e-e6cad6e4ec53",
              "title": "detect()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with single names",
                  "fullTitle": "Genderize detect() should work with single names",
                  "timedOut": false,
                  "duration": 629,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const g=new Genderize;const result=await g.predict(\"Max\");assert.equal(result.name,\"Max\");assert.equal(result.gender,\"male\");assert.equal(result.gender,GenderizeGender.MALE);assert.ok(result.probability>.9,\"probability > 0.9\");assert.ok(result.count>1e4,\"count > 10000\");assert.ok(g.limit,\"limit is set\");assert.ok(g.limit.limit>0,\"limit > 0\");assert.ok(g.limit.remaining>0,\"remaining > 0\");assert.ok(g.limit.reset instanceof Date,\"reset is a Date\")",
                  "err": {},
                  "uuid": "e5228a14-07e2-47a6-a9ea-3d94fe215c05",
                  "parentUUID": "5c68e3ea-d2bf-464f-868e-e6cad6e4ec53",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple names",
                  "fullTitle": "Genderize detect() should work with multiple names",
                  "timedOut": false,
                  "duration": 93,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const g=new Genderize;const result=await g.predict([\"Moritz\",\"Lisa\"]);assert.equal(result.length,2);assert.equal(result[0].name,\"Moritz\");assert.equal(result[0].gender,\"male\");assert.equal(result[0].gender,GenderizeGender.MALE);assert.ok(result[0].probability>.9,\"probability > 0.9\");assert.ok(result[0].count>1e4,\"count > 10000\");assert.equal(result[1].name,\"Lisa\");assert.equal(result[1].gender,\"female\");assert.equal(result[1].gender,GenderizeGender.FEMALE);assert.ok(result[1].probability>.9,\"probability > 0.9\");assert.ok(result[1].count>1e4,\"count > 10000\");assert.ok(g.limit,\"limit is set\");assert.ok(g.limit.limit>0,\"limit > 0\");assert.ok(g.limit.remaining>0,\"remaining > 0\");assert.ok(g.limit.reset instanceof Date,\"reset is a Date\")",
                  "err": {},
                  "uuid": "12657d7e-c14f-48ac-a3ab-e68881ab39ad",
                  "parentUUID": "5c68e3ea-d2bf-464f-868e-e6cad6e4ec53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e5228a14-07e2-47a6-a9ea-3d94fe215c05",
                "12657d7e-c14f-48ac-a3ab-e68881ab39ad"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 722,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2023-05-02T18:58:25.401Z",
    "end": "2023-05-02T18:58:26.309Z",
    "duration": 908,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "606d519d-dd3b-45e6-9ed7-5411c0905926",
      "title": "",
      "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
      "file": "/test/lib/index.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "e571f8d7-be97-4c0f-9f31-771a057bf91a",
          "title": "Genderize",
          "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
          "file": "/test/lib/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "b22be248-2082-4120-bda1-51121b17985e",
              "title": "params()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with arrays",
                  "fullTitle": "Genderize params() should work with arrays",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params(['Max', 'Lisa'], 'DE').toString(), 'name[]=Max&name[]=Lisa&country_id=DE');",
                  "err": {},
                  "uuid": "b71f8b57-e99a-4dd0-8116-970922f5f06d",
                  "parentUUID": "b22be248-2082-4120-bda1-51121b17985e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single string",
                  "fullTitle": "Genderize params() should work with single string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params('Max').toString(), 'name=Max');",
                  "err": {},
                  "uuid": "26d25303-c947-405c-a271-4600047a7a03",
                  "parentUUID": "b22be248-2082-4120-bda1-51121b17985e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if no name was given",
                  "fullTitle": "Genderize params() should throw an exception if no name was given",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Genderize().params([]);\n}, /No name given, but at least one is required/);",
                  "err": {},
                  "uuid": "7fe25e58-d166-4ee0-a438-37f8adcb3260",
                  "parentUUID": "b22be248-2082-4120-bda1-51121b17985e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if > 10 names were given",
                  "fullTitle": "Genderize params() should throw an exception if > 10 names were given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Genderize().params([\n        'James', 'Robert', 'John', 'Michael', 'David', 'William',\n        'Richard', 'Thomas', 'Christopher', 'Daniel', 'Paul'\n    ]);\n}, /Too many names given: 11 names provided, but 10 is the maximum allowed/);",
                  "err": {},
                  "uuid": "d65c6f25-8751-409e-96ac-cbd0f70ebc83",
                  "parentUUID": "b22be248-2082-4120-bda1-51121b17985e",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add the apiKey if given",
                  "fullTitle": "Genderize params() should add the apiKey if given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize('hello-world').params(['Max', 'Lisa'], 'DE').toString(), 'name[]=Max&name[]=Lisa&country_id=DE&apikey=hello-world');",
                  "err": {},
                  "uuid": "e33b3f9f-93db-4477-acae-ced93e5862bb",
                  "parentUUID": "b22be248-2082-4120-bda1-51121b17985e",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b71f8b57-e99a-4dd0-8116-970922f5f06d",
                "26d25303-c947-405c-a271-4600047a7a03",
                "7fe25e58-d166-4ee0-a438-37f8adcb3260",
                "d65c6f25-8751-409e-96ac-cbd0f70ebc83",
                "e33b3f9f-93db-4477-acae-ced93e5862bb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1754556a-d41c-438e-a773-a4b377aa3316",
              "title": "limit()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return null if no request was sent before",
                  "fullTitle": "Genderize limit() should return null if no request was sent before",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Genderize().limit, null);",
                  "err": {},
                  "uuid": "5fff9a13-3a30-44b3-9808-ba4c1f8d3e60",
                  "parentUUID": "1754556a-d41c-438e-a773-a4b377aa3316",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5fff9a13-3a30-44b3-9808-ba4c1f8d3e60"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "87c11cda-8046-4291-ab80-59979ceb3cd4",
              "title": "getIntHeader()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with string",
                  "fullTitle": "Genderize getIntHeader() should work with string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader('123'), 123);",
                  "err": {},
                  "uuid": "0a0db3fb-92cf-406d-a8da-e279f10c4094",
                  "parentUUID": "87c11cda-8046-4291-ab80-59979ceb3cd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with string[]",
                  "fullTitle": "Genderize getIntHeader() should work with string[]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(['123', '456']), 123);",
                  "err": {},
                  "uuid": "c8f9bbf0-08f2-4097-af13-bf9c3fc4b440",
                  "parentUUID": "87c11cda-8046-4291-ab80-59979ceb3cd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with undefined",
                  "fullTitle": "Genderize getIntHeader() should work with undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(undefined), undefined);",
                  "err": {},
                  "uuid": "6480ed52-5b42-4bbd-a0da-375365818c2c",
                  "parentUUID": "87c11cda-8046-4291-ab80-59979ceb3cd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a0db3fb-92cf-406d-a8da-e279f10c4094",
                "c8f9bbf0-08f2-4097-af13-bf9c3fc4b440",
                "6480ed52-5b42-4bbd-a0da-375365818c2c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "8b113f5d-18f6-4254-8c14-ab8a5df92fd7",
              "title": "detect()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with single names",
                  "fullTitle": "Genderize detect() should work with single names",
                  "timedOut": false,
                  "duration": 501,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const g = new Genderize();\n    const result = yield g.predict('Max');\n    assert.equal(result.name, 'Max');\n    assert.equal(result.gender, 'male');\n    assert.equal(result.gender, GenderizeGender.MALE);\n    assert.ok(result.probability > 0.9, 'probability > 0.9');\n    assert.ok(result.count > 10000, 'count > 10000');\n    assert.ok(g.limit, 'limit is set');\n    assert.ok(g.limit.limit > 0, 'limit > 0');\n    assert.ok(g.limit.remaining > 0, 'remaining > 0');\n    assert.ok(g.limit.reset instanceof Date, 'reset is a Date');\n});",
                  "err": {},
                  "uuid": "f891c07e-d5d8-4121-a24a-e4e5087b7fdd",
                  "parentUUID": "8b113f5d-18f6-4254-8c14-ab8a5df92fd7",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple names",
                  "fullTitle": "Genderize detect() should work with multiple names",
                  "timedOut": false,
                  "duration": 395,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const g = new Genderize();\n    const result = yield g.predict(['Moritz', 'Lisa']);\n    assert.equal(result.length, 2);\n    assert.equal(result[0].name, 'Moritz');\n    assert.equal(result[0].gender, 'male');\n    assert.equal(result[0].gender, GenderizeGender.MALE);\n    assert.ok(result[0].probability > 0.9, 'probability > 0.9');\n    assert.ok(result[0].count > 10000, 'count > 10000');\n    assert.equal(result[1].name, 'Lisa');\n    assert.equal(result[1].gender, 'female');\n    assert.equal(result[1].gender, GenderizeGender.FEMALE);\n    assert.ok(result[1].probability > 0.9, 'probability > 0.9');\n    assert.ok(result[1].count > 10000, 'count > 10000');\n    assert.ok(g.limit, 'limit is set');\n    assert.ok(g.limit.limit > 0, 'limit > 0');\n    assert.ok(g.limit.remaining > 0, 'remaining > 0');\n    assert.ok(g.limit.reset instanceof Date, 'reset is a Date');\n});",
                  "err": {},
                  "uuid": "dccba23f-b766-4af2-b168-aa987009b1a6",
                  "parentUUID": "8b113f5d-18f6-4254-8c14-ab8a5df92fd7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f891c07e-d5d8-4121-a24a-e4e5087b7fdd",
                "dccba23f-b766-4af2-b168-aa987009b1a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 896,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
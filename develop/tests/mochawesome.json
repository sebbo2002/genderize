{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2025-04-29T15:17:12.984Z",
    "end": "2025-04-29T15:17:13.404Z",
    "duration": 420,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cf7eb938-fda6-4d55-a366-c65445b12daa",
      "title": "",
      "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
      "file": "/test/lib/index.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "63273d94-c1d7-4b5b-8fd6-95842ecea886",
          "title": "Genderize",
          "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
          "file": "/test/lib/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ed3d2dc1-538a-41ab-975b-38c10f65194f",
              "title": "params()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with arrays",
                  "fullTitle": "Genderize params() should work with arrays",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params([\"Max\",\"Lisa\"],\"DE\").toString(),\"name[]=Max&name[]=Lisa&country_id=DE\")",
                  "err": {},
                  "uuid": "99618b2d-0a25-4004-b57b-a63837fddf7d",
                  "parentUUID": "ed3d2dc1-538a-41ab-975b-38c10f65194f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single string",
                  "fullTitle": "Genderize params() should work with single string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params(\"Max\").toString(),\"name=Max\")",
                  "err": {},
                  "uuid": "a8ab7cce-109b-4960-9898-eb3ad8348fb2",
                  "parentUUID": "ed3d2dc1-538a-41ab-975b-38c10f65194f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if no name was given",
                  "fullTitle": "Genderize params() should throw an exception if no name was given",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{new Genderize().params([])},/No name given, but at least one is required/)",
                  "err": {},
                  "uuid": "a9b7810c-ff4b-421a-a91b-6436e0c47e9d",
                  "parentUUID": "ed3d2dc1-538a-41ab-975b-38c10f65194f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if > 10 names were given",
                  "fullTitle": "Genderize params() should throw an exception if > 10 names were given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(()=>{new Genderize().params([\"James\",\"Robert\",\"John\",\"Michael\",\"David\",\"William\",\"Richard\",\"Thomas\",\"Christopher\",\"Daniel\",\"Paul\"])},/Too many names given: 11 names provided, but 10 is the maximum allowed/)",
                  "err": {},
                  "uuid": "819a8fcd-a339-4a79-b5c7-296ad44c2548",
                  "parentUUID": "ed3d2dc1-538a-41ab-975b-38c10f65194f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add the apiKey if given",
                  "fullTitle": "Genderize params() should add the apiKey if given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize(\"hello-world\").params([\"Max\",\"Lisa\"],\"DE\").toString(),\"name[]=Max&name[]=Lisa&country_id=DE&apikey=hello-world\")",
                  "err": {},
                  "uuid": "2aa03b25-df86-4309-933b-b65becafb0da",
                  "parentUUID": "ed3d2dc1-538a-41ab-975b-38c10f65194f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "99618b2d-0a25-4004-b57b-a63837fddf7d",
                "a8ab7cce-109b-4960-9898-eb3ad8348fb2",
                "a9b7810c-ff4b-421a-a91b-6436e0c47e9d",
                "819a8fcd-a339-4a79-b5c7-296ad44c2548",
                "2aa03b25-df86-4309-933b-b65becafb0da"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c3499e75-0469-4053-a4b3-4d46216a4d53",
              "title": "limit()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return null if no request was sent before",
                  "fullTitle": "Genderize limit() should return null if no request was sent before",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Genderize().limit,null)",
                  "err": {},
                  "uuid": "38ea0831-10bb-4ccb-bd34-8a2aa9a8b37b",
                  "parentUUID": "c3499e75-0469-4053-a4b3-4d46216a4d53",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "38ea0831-10bb-4ccb-bd34-8a2aa9a8b37b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "868c41f8-25f8-4ce9-9f77-275e3629f879",
              "title": "getIntHeader()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with string",
                  "fullTitle": "Genderize getIntHeader() should work with string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(\"123\"),123)",
                  "err": {},
                  "uuid": "494994d4-8905-45de-a3d8-21effad4ec9b",
                  "parentUUID": "868c41f8-25f8-4ce9-9f77-275e3629f879",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with string[]",
                  "fullTitle": "Genderize getIntHeader() should work with string[]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader([\"123\",\"456\"]),123)",
                  "err": {},
                  "uuid": "ccad3685-6cae-4e22-9595-3f000de952b3",
                  "parentUUID": "868c41f8-25f8-4ce9-9f77-275e3629f879",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with undefined",
                  "fullTitle": "Genderize getIntHeader() should work with undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(void 0),void 0)",
                  "err": {},
                  "uuid": "b282e0dc-6a35-40bd-b9af-0ebc27622451",
                  "parentUUID": "868c41f8-25f8-4ce9-9f77-275e3629f879",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "494994d4-8905-45de-a3d8-21effad4ec9b",
                "ccad3685-6cae-4e22-9595-3f000de952b3",
                "b282e0dc-6a35-40bd-b9af-0ebc27622451"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "e1658f8a-6149-455f-97db-70d4948e4666",
              "title": "detect()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with single names",
                  "fullTitle": "Genderize detect() should work with single names",
                  "timedOut": false,
                  "duration": 366,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const g=new Genderize;const result=await g.predict(\"Max\");assert.equal(result.name,\"Max\");assert.equal(result.gender,\"male\");assert.equal(result.gender,GenderizeGender.MALE);assert.ok(result.probability>.9,\"probability > 0.9\");assert.ok(result.count>1e4,\"count > 10000\");assert.ok(g.limit,\"limit is set\");assert.ok(g.limit.limit>0,\"limit > 0\");assert.ok(g.limit.remaining>0,\"remaining > 0\");assert.ok(g.limit.reset instanceof Date,\"reset is a Date\")",
                  "err": {},
                  "uuid": "fde7c043-c3df-455f-b79c-088b89ba478a",
                  "parentUUID": "e1658f8a-6149-455f-97db-70d4948e4666",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple names",
                  "fullTitle": "Genderize detect() should work with multiple names",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const g=new Genderize;const result=await g.predict([\"Moritz\",\"Lisa\"]);assert.equal(result.length,2);assert.equal(result[0].name,\"Moritz\");assert.equal(result[0].gender,\"male\");assert.equal(result[0].gender,GenderizeGender.MALE);assert.ok(result[0].probability>.9,\"probability > 0.9\");assert.ok(result[0].count>1e4,\"count > 10000\");assert.equal(result[1].name,\"Lisa\");assert.equal(result[1].gender,\"female\");assert.equal(result[1].gender,GenderizeGender.FEMALE);assert.ok(result[1].probability>.9,\"probability > 0.9\");assert.ok(result[1].count>1e4,\"count > 10000\");assert.ok(g.limit,\"limit is set\");assert.ok(g.limit.limit>0,\"limit > 0\");assert.ok(g.limit.remaining>0,\"remaining > 0\");assert.ok(g.limit.reset instanceof Date,\"reset is a Date\")",
                  "err": {},
                  "uuid": "ef32fb6e-3827-4ae1-ac32-52e6fef7ae14",
                  "parentUUID": "e1658f8a-6149-455f-97db-70d4948e4666",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fde7c043-c3df-455f-b79c-088b89ba478a",
                "ef32fb6e-3827-4ae1-ac32-52e6fef7ae14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 413,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
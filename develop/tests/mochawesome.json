{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2023-02-08T19:28:19.082Z",
    "end": "2023-02-08T19:28:19.410Z",
    "duration": 328,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6f5676c8-21c0-42b9-988e-569e2918376f",
      "title": "",
      "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
      "file": "/test/lib/index.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f22a8f27-d930-4d97-915a-e1a5c9696f5f",
          "title": "Genderize",
          "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
          "file": "/test/lib/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6a6a9252-6ad7-4d28-9863-dc28adf23ee5",
              "title": "params()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with arrays",
                  "fullTitle": "Genderize params() should work with arrays",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params(['Max', 'Lisa'], 'DE').toString(), 'name[]=Max&name[]=Lisa&country_id=DE');",
                  "err": {},
                  "uuid": "999cf43b-8f8f-424f-b39d-bd9f0ab28ba7",
                  "parentUUID": "6a6a9252-6ad7-4d28-9863-dc28adf23ee5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single string",
                  "fullTitle": "Genderize params() should work with single string",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params('Max').toString(), 'name=Max');",
                  "err": {},
                  "uuid": "febbd408-69c4-4631-aea1-1f322eecf171",
                  "parentUUID": "6a6a9252-6ad7-4d28-9863-dc28adf23ee5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if no name was given",
                  "fullTitle": "Genderize params() should throw an exception if no name was given",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Genderize().params([]);\n}, /No name given, but at least one is required/);",
                  "err": {},
                  "uuid": "c7320665-cd69-4fbd-bf20-2e8e7c33eea5",
                  "parentUUID": "6a6a9252-6ad7-4d28-9863-dc28adf23ee5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if > 10 names were given",
                  "fullTitle": "Genderize params() should throw an exception if > 10 names were given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Genderize().params([\n        'James', 'Robert', 'John', 'Michael', 'David', 'William',\n        'Richard', 'Thomas', 'Christopher', 'Daniel', 'Paul'\n    ]);\n}, /Too many names given: 11 names provided, but 10 is the maximum allowed/);",
                  "err": {},
                  "uuid": "32601c7d-fc1d-48c0-8396-453b6fa8baad",
                  "parentUUID": "6a6a9252-6ad7-4d28-9863-dc28adf23ee5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add the apiKey if given",
                  "fullTitle": "Genderize params() should add the apiKey if given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize('hello-world').params(['Max', 'Lisa'], 'DE').toString(), 'name[]=Max&name[]=Lisa&country_id=DE&apikey=hello-world');",
                  "err": {},
                  "uuid": "f9def94a-f70e-4331-aff1-ff16b72509c8",
                  "parentUUID": "6a6a9252-6ad7-4d28-9863-dc28adf23ee5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "999cf43b-8f8f-424f-b39d-bd9f0ab28ba7",
                "febbd408-69c4-4631-aea1-1f322eecf171",
                "c7320665-cd69-4fbd-bf20-2e8e7c33eea5",
                "32601c7d-fc1d-48c0-8396-453b6fa8baad",
                "f9def94a-f70e-4331-aff1-ff16b72509c8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "aa249eaa-e973-481f-9e51-965eb4ee08b5",
              "title": "limit()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return null if no request was sent before",
                  "fullTitle": "Genderize limit() should return null if no request was sent before",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Genderize().limit, null);",
                  "err": {},
                  "uuid": "e073ce99-52a9-47bd-bff3-8414366eb49b",
                  "parentUUID": "aa249eaa-e973-481f-9e51-965eb4ee08b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e073ce99-52a9-47bd-bff3-8414366eb49b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ecae9e89-53df-477d-b41f-05bb37f810b6",
              "title": "getIntHeader()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with string",
                  "fullTitle": "Genderize getIntHeader() should work with string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader('123'), 123);",
                  "err": {},
                  "uuid": "afc157b8-b101-402a-8906-d50f2ebd4a17",
                  "parentUUID": "ecae9e89-53df-477d-b41f-05bb37f810b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with string[]",
                  "fullTitle": "Genderize getIntHeader() should work with string[]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(['123', '456']), 123);",
                  "err": {},
                  "uuid": "dfb5c3d2-134f-420d-90df-402d1aadf282",
                  "parentUUID": "ecae9e89-53df-477d-b41f-05bb37f810b6",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with undefined",
                  "fullTitle": "Genderize getIntHeader() should work with undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(undefined), undefined);",
                  "err": {},
                  "uuid": "956f4def-42ea-456d-8c15-43242edd11a6",
                  "parentUUID": "ecae9e89-53df-477d-b41f-05bb37f810b6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "afc157b8-b101-402a-8906-d50f2ebd4a17",
                "dfb5c3d2-134f-420d-90df-402d1aadf282",
                "956f4def-42ea-456d-8c15-43242edd11a6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3ce5b65e-d0f8-4aa0-91d1-b5c319070432",
              "title": "detect()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with single names",
                  "fullTitle": "Genderize detect() should work with single names",
                  "timedOut": false,
                  "duration": 188,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const g = new Genderize();\n    const result = yield g.predict('Max');\n    assert.equal(result.name, 'Max');\n    assert.equal(result.gender, 'male');\n    assert.equal(result.gender, GenderizeGender.MALE);\n    assert.ok(result.probability > 0.9, 'probability > 0.9');\n    assert.ok(result.count > 10000, 'count > 10000');\n    assert.ok(g.limit, 'limit is set');\n    assert.ok(g.limit.limit > 0, 'limit > 0');\n    assert.ok(g.limit.remaining > 0, 'remaining > 0');\n    assert.ok(g.limit.reset instanceof Date, 'reset is a Date');\n});",
                  "err": {},
                  "uuid": "0a0d8944-900e-48c7-9526-eecfaf10b161",
                  "parentUUID": "3ce5b65e-d0f8-4aa0-91d1-b5c319070432",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple names",
                  "fullTitle": "Genderize detect() should work with multiple names",
                  "timedOut": false,
                  "duration": 126,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "return __awaiter(this, void 0, void 0, function* () {\n    const g = new Genderize();\n    const result = yield g.predict(['Moritz', 'Lisa']);\n    assert.equal(result.length, 2);\n    assert.equal(result[0].name, 'Moritz');\n    assert.equal(result[0].gender, 'male');\n    assert.equal(result[0].gender, GenderizeGender.MALE);\n    assert.ok(result[0].probability > 0.9, 'probability > 0.9');\n    assert.ok(result[0].count > 10000, 'count > 10000');\n    assert.equal(result[1].name, 'Lisa');\n    assert.equal(result[1].gender, 'female');\n    assert.equal(result[1].gender, GenderizeGender.FEMALE);\n    assert.ok(result[1].probability > 0.9, 'probability > 0.9');\n    assert.ok(result[1].count > 10000, 'count > 10000');\n    assert.ok(g.limit, 'limit is set');\n    assert.ok(g.limit.limit > 0, 'limit > 0');\n    assert.ok(g.limit.remaining > 0, 'remaining > 0');\n    assert.ok(g.limit.reset instanceof Date, 'reset is a Date');\n});",
                  "err": {},
                  "uuid": "58042cd6-e01f-46e2-954e-95891539ebc0",
                  "parentUUID": "3ce5b65e-d0f8-4aa0-91d1-b5c319070432",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0a0d8944-900e-48c7-9526-eecfaf10b161",
                "58042cd6-e01f-46e2-954e-95891539ebc0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 314,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}
{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 11,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-20T12:56:04.568Z",
    "end": "2024-08-20T12:56:05.202Z",
    "duration": 634,
    "testsRegistered": 11,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e171e747-15bc-4511-a8dc-c63128c6ed3c",
      "title": "",
      "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
      "file": "/test/lib/index.ts",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "70fc216a-2b07-4f2f-b3bb-2b280c18bb16",
          "title": "Genderize",
          "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
          "file": "/test/lib/index.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "4e4d4ec2-76dd-4205-9b84-8870cdc64434",
              "title": "params()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with arrays",
                  "fullTitle": "Genderize params() should work with arrays",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params(['Max', 'Lisa'], 'DE').toString(), 'name[]=Max&name[]=Lisa&country_id=DE');",
                  "err": {},
                  "uuid": "55f255de-5de9-40f7-bfe7-d03063081336",
                  "parentUUID": "4e4d4ec2-76dd-4205-9b84-8870cdc64434",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with single string",
                  "fullTitle": "Genderize params() should work with single string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize().params('Max').toString(), 'name=Max');",
                  "err": {},
                  "uuid": "065b9c0c-bda1-4bca-9a2f-3b399fb812b4",
                  "parentUUID": "4e4d4ec2-76dd-4205-9b84-8870cdc64434",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if no name was given",
                  "fullTitle": "Genderize params() should throw an exception if no name was given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Genderize().params([]);\n}, /No name given, but at least one is required/);",
                  "err": {},
                  "uuid": "a0809458-cd4e-4ad9-973e-b571fa8e6774",
                  "parentUUID": "4e4d4ec2-76dd-4205-9b84-8870cdc64434",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should throw an exception if > 10 names were given",
                  "fullTitle": "Genderize params() should throw an exception if > 10 names were given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.throws(() => {\n    new Genderize().params([\n        'James', 'Robert', 'John', 'Michael', 'David', 'William',\n        'Richard', 'Thomas', 'Christopher', 'Daniel', 'Paul'\n    ]);\n}, /Too many names given: 11 names provided, but 10 is the maximum allowed/);",
                  "err": {},
                  "uuid": "9d9e713c-269b-4bae-972a-b7dace51743e",
                  "parentUUID": "4e4d4ec2-76dd-4205-9b84-8870cdc64434",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should add the apiKey if given",
                  "fullTitle": "Genderize params() should add the apiKey if given",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.equal(new Genderize('hello-world').params(['Max', 'Lisa'], 'DE').toString(), 'name[]=Max&name[]=Lisa&country_id=DE&apikey=hello-world');",
                  "err": {},
                  "uuid": "b638c5b3-38af-41af-88ab-3bb30e58421c",
                  "parentUUID": "4e4d4ec2-76dd-4205-9b84-8870cdc64434",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55f255de-5de9-40f7-bfe7-d03063081336",
                "065b9c0c-bda1-4bca-9a2f-3b399fb812b4",
                "a0809458-cd4e-4ad9-973e-b571fa8e6774",
                "9d9e713c-269b-4bae-972a-b7dace51743e",
                "b638c5b3-38af-41af-88ab-3bb30e58421c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6309a0bf-1e0c-4c15-b467-333ded197b97",
              "title": "limit()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should return null if no request was sent before",
                  "fullTitle": "Genderize limit() should return null if no request was sent before",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(new Genderize().limit, null);",
                  "err": {},
                  "uuid": "a89aec20-5d84-4ee2-b724-4ae6611e1999",
                  "parentUUID": "6309a0bf-1e0c-4c15-b467-333ded197b97",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a89aec20-5d84-4ee2-b724-4ae6611e1999"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "f2caed03-2b38-428b-acee-072c9614c9f5",
              "title": "getIntHeader()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with string",
                  "fullTitle": "Genderize getIntHeader() should work with string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader('123'), 123);",
                  "err": {},
                  "uuid": "cfd723ad-fbe9-42ba-868f-6fdf05da4877",
                  "parentUUID": "f2caed03-2b38-428b-acee-072c9614c9f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with string[]",
                  "fullTitle": "Genderize getIntHeader() should work with string[]",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(['123', '456']), 123);",
                  "err": {},
                  "uuid": "dfd2e45c-1438-43f9-a16d-7b595332d142",
                  "parentUUID": "f2caed03-2b38-428b-acee-072c9614c9f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with undefined",
                  "fullTitle": "Genderize getIntHeader() should work with undefined",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "assert.strictEqual(Genderize.getIntHeader(undefined), undefined);",
                  "err": {},
                  "uuid": "95d52ce3-98dc-44a6-93c9-1d329e04a525",
                  "parentUUID": "f2caed03-2b38-428b-acee-072c9614c9f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "cfd723ad-fbe9-42ba-868f-6fdf05da4877",
                "dfd2e45c-1438-43f9-a16d-7b595332d142",
                "95d52ce3-98dc-44a6-93c9-1d329e04a525"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ab9fcc5-b879-4054-9761-8c5bb4a382f8",
              "title": "detect()",
              "fullFile": "/home/runner/work/genderize/genderize/test/lib/index.ts",
              "file": "/test/lib/index.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should work with single names",
                  "fullTitle": "Genderize detect() should work with single names",
                  "timedOut": false,
                  "duration": 532,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const g = new Genderize();\nconst result = await g.predict('Max');\nassert.equal(result.name, 'Max');\nassert.equal(result.gender, 'male');\nassert.equal(result.gender, GenderizeGender.MALE);\nassert.ok(result.probability > 0.9, 'probability > 0.9');\nassert.ok(result.count > 10000, 'count > 10000');\nassert.ok(g.limit, 'limit is set');\nassert.ok(g.limit.limit > 0, 'limit > 0');\nassert.ok(g.limit.remaining > 0, 'remaining > 0');\nassert.ok(g.limit.reset instanceof Date, 'reset is a Date');",
                  "err": {},
                  "uuid": "32070aaf-092e-427e-97ea-b682dbdd8ded",
                  "parentUUID": "6ab9fcc5-b879-4054-9761-8c5bb4a382f8",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should work with multiple names",
                  "fullTitle": "Genderize detect() should work with multiple names",
                  "timedOut": false,
                  "duration": 95,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const g = new Genderize();\nconst result = await g.predict(['Moritz', 'Lisa']);\nassert.equal(result.length, 2);\nassert.equal(result[0].name, 'Moritz');\nassert.equal(result[0].gender, 'male');\nassert.equal(result[0].gender, GenderizeGender.MALE);\nassert.ok(result[0].probability > 0.9, 'probability > 0.9');\nassert.ok(result[0].count > 10000, 'count > 10000');\nassert.equal(result[1].name, 'Lisa');\nassert.equal(result[1].gender, 'female');\nassert.equal(result[1].gender, GenderizeGender.FEMALE);\nassert.ok(result[1].probability > 0.9, 'probability > 0.9');\nassert.ok(result[1].count > 10000, 'count > 10000');\nassert.ok(g.limit, 'limit is set');\nassert.ok(g.limit.limit > 0, 'limit > 0');\nassert.ok(g.limit.remaining > 0, 'remaining > 0');\nassert.ok(g.limit.reset instanceof Date, 'reset is a Date');",
                  "err": {},
                  "uuid": "3cfa6706-7f55-4ef6-b8a2-e09459d70a99",
                  "parentUUID": "6ab9fcc5-b879-4054-9761-8c5bb4a382f8",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "32070aaf-092e-427e-97ea-b682dbdd8ded",
                "3cfa6706-7f55-4ef6-b8a2-e09459d70a99"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 627,
              "root": false,
              "rootEmpty": false,
              "_timeout": 10000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}